statment    : expr ((COMMA expr)* KEYWORD)? end

expression  : KEYWORD:var IDENTIFIER (EQUALS expression)?
            : KEYWORD:write expression
            : arith_op
            : logic_op

logic_op    : comp_op (KEYWORD:and|KEYWORD:or comp_op)*
            : KEYWORD:not logic_op

comp_op     : arith_op (DOUBLE_EQUALS|NOT_EQUALS|GREATER|LOWER|GREATER_EQUALS|LOWER_EQUALS arith_op)*

arith_op    : term (PLUS|MINUS term)*

term        : factor (MULT|DIV factor)*

factor      : PLUS|MINUS value
            : LPAREN arith_op RPAREN
            : call
            : variable
            : if_expr
            : list_expr
            : func_def
            : class_def

variable    : get_variable
            : assing_variable
            : list_element

list_element: get_list_element
            : set_list_element
            : attribute

attribute   : IDENTIFIER DOT IDENTIFIER
            : value

value       : NUMBER|STRING|IDENTIFIER
            : KEYWORD:this

get_list_element: IDENTIFIER LSQARE expr RSQARE
set_list_element: IDENTIFIER LSQARE expr RSQARE EQUALS expr

call        : IDENTIFIER (LPAREN (expr (COMMA expr)*)? RPAREN)?

if_expr     : KEYWORD:if 
              logic_op COLON 
              statment
              (KEYWORD:else COLON 
              statment )?

list_expr   : LSQARE (expr (COMMA expr)*)? RSQARE

func_def    : KEYWORKD:function IDENTIFIER
              LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
              COLON statment

trigger_def : KEYWORD:trigger IDENTIFIER
              LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
              COLON statment

class_def   : KEYWORD:class IDENTIFIER COLON
            : statment


$var count = 0

TODO : trigger <event>(<logic_op>): <statment>

            dsl 
            class Trigger:
                var function = void
                var condition = void
                event_type = void

                function Trigger(function, condition, type):
                    this.function = function
                    this.condition = condition
                    this.type = type
                end
            end

            class Message:
                var content = void
                var author = void
                var context = void aka server and chat

                funtion Message(content, author, context):
                    this.content = content
                    this.author = author
                    this.context = context
                end
            end
            dsl

            python
            # on text input
            ###############
            for trigger in trigger_list:
                if trigger.getAttribute('event_type').value == on_message:
                    if trigger.getAttribute.condition.execute(root_context):
                        message_object = interpreter.visit(CallNode(''Message', args=[message.context, message.author, message.channel?]), core_context)
                        trigger.getAttribute.function.execute(args=[message_object], root_context)
            ###############
            python


class Test: function Test(a, b): void end, function get_a(): this.a end end

class Test:
    var name  = void,
    var value = void,

    function Test(name, value):
        this.name = name,
        this.value = value
    end,

    function getName():
        this.c[0]
    end,

    function setName(value):
        this.c[0] = value
    end,

    function getObjectName():
        this.name
    end
end

function for(start, finish, body): if start < finish: body(), var start = start + 1, for(start, finish, body) end end
function calc(value_1, op, value_2): if op == "+": value_1 + value_2 else: if op == "-": value_1 - value_2 else: if op == "*": value_1 * value_2 else: if op == "/": value_1 / value_2

class foo:

    function foo():
        var a = "valueA",
        var b = "valueB"
    end,

    function test():
        write(a),
        write(b)
    end

end


# Possible Class type declaration
# Requires Object type, this|self keyword, period '.' tokentype

class Class(Callable):

    body_node = any
    arg_names = []

    def execute(self, args, context: Context):
        interpreter = Interpreter()

        self.check_args(args, self.arg_names)
        new_context = self.create_context(args, self.arg_names, context)

        interpreter.visit(self.body_node, new_context)

        constructor = new_context.symbol_table.get(self.name)
        call = CallNode(constructor, new_context)

        interpreter.visit(call, new_context)

        return Object(new_context)

class Object()



